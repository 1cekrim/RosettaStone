namespace Hearthstonepp.FlatData;

struct TaskMetaTrait {
    id:int;
    status:uint;
    userID:ubyte;
}

table PlayRequirements {
    key_:int (key);
    value:int;
}

table GameTag {
    key_:int (key);
    value:int;
}

table Entity {
    card:Card;
    gameTags:[GameTag];
}

table Card {
    id:string;
    rarity:int;
    faction:int;
    cardSet:int;
    cardClass:int;
    cardType:int;
    race:int;
    name:string;
    text:string;
    collectible:bool;
    cost:uint;
    attack:uint; 
    health:uint; 
    durability:uint; 
    mechanics:[int];
    playRequirements:[PlayRequirements];
    entourages:[string];
    maxAllowedInDeck:uint;
}

table EntityVector {
    vector:[Entity];
}

table TaskMeta {
    trait:TaskMetaTrait;
    buffer:[ubyte];
}

table TaskMetaVector {
    vector:[TaskMeta];
}

table PlayerSetting {
    player1:string;
    player2:string;
}

table GameStatus {
    currentPlayer:ubyte;
    opponentPlayer:ubyte;
    currentMana:ubyte;
    opponentMana:ubyte;

    currentHero:Entity;
    opponentHero:Entity;

    currentField:[Entity];
    currentHand:[Entity];

    opponentField:[Entity];
    numOpponentHand:ubyte;

    numCurrentDeck:ubyte;
    numOpponentDeck:ubyte;

    currentAttacked:[Entity];
    opponentAttacked:[Entity];
}

table RequireTaskMeta {
    required:int;
}

table ResponseMulligan {
    mulligan:[ubyte];
}

table ResponsePlayCard {
    cardIndex:ubyte;
}

table ResponsePlayMinion {
    position:ubyte;
}

table ResponsePlaySpell {
    targetType:ubyte;
    position:ubyte;
}

table ResponseTarget {
    src:ubyte;
    dst:ubyte;
}

table GameEndTaskMeta {
    winnerID:string;
}